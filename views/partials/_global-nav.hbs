<nav class='global-nav'>
    <div class='global-nav__main'>
        <h1 class='global-nav__main__header'>Zero Waste</h1>
        <ul class='global-nav__main__menu'>
            <li><a href='#intro'>Zero Waste</a></li>
            <li><a href='#transparencyContainer'>Transparantie</a></li>
            <li><a href='#mapAms'>Kaart</a></li>
            <li><a href='#compareWaste'>Overzicht</a></li>
            <li><a href='#routesContainer'>Route</a></li>
            <li><a href='#participateContainer'>Doe mee</a></li>
        </ul>
    </div>

    <div class='global-nav__sub'>
        <div class='global-nav__sub__inner'>
            <ol class='global-nav__sub__menu'>
                <li>
                    <input id='inputMaandag' type='radio' name='days' value='ma'>
                    <label for="inputMaandag">Maandag</label>
                </li>
                <li>
                    <input id='inputDinsdag' type='radio' name='days' value='di'>
                    <label for="inputDinsdag">Dinsdag</label>
                </li>
                <li>
                    <input id='inputWoendag' type='radio' name='days' value='woe'>
                    <label for="inputWoendag">Woensdag</label>
                </li>
                <li>
                    <input id='inputDonderdag' type='radio' name='days' value='do'>
                    <label for="inputDonderdag">Donderdag</label>
                </li>
                <li>
                    <input id='inputVrijdag' type='radio' name='days' value='vr'>
                    <label for="inputVrijdag">Vrijdag</label>
                </li>
                <li>
                    <input id='inputZaterdag' type='radio' name='days' value='zat'>
                    <label for="inputZaterdag">Zaterdag</label>
                </li>
                <li>
                    <input id='inputZondag' type='radio' name='days' value='zo'>
                    <label for="inputZondag">Zondag</label>
                </li>
            </ol>

            <div class='dropdown-container'>
                <div id='districtsDropdownSelections' class='dropdown-values'>
                    <label class='user-select-default'>Amsterdam</label>
                </div>
                <ol id='districtsDropdown' class='dropdown--multi-level'></ol>
            </div>
        </div>
    </div>
</nav>

<script type='module'>
let userSelectDistrictsList = [];
let userSelectDay = '';
let availableColorList = ['2ec7a4', 'ffb500', '4490b4'];
let rawData = {};

d3.queue()
    .defer(d3.json, './static/data/output/wasteByDistrict.json')
    .await(updateCharts);

// load/update charts and menu items
function updateCharts(error, dataJson) {
    rawData = dataJson;
    const data = rawData.objects.buurten.geometries;

    // count the data that is not empty
    const validDataCount = data.map(item => {
        return Object.values(item.properties.waste).every( key => {
            return Object.values(item.properties.waste)[key] !== 0;
        });
    }).filter( item => item).length;

    // calc average
    const compareWaste = calculateWasteAverage(data, validDataCount);

    // populate dropdowns
    populateDistrictsDropdown(data, compareWaste);

    // add eventlisteners to submenu
    addSubMenuEventListers();

    // update charts
    updateBarChart(compareWaste);
    updateMap(rawData);

    // draw borders once
    drawDistrictBorders(rawData);
}

//#region AMS MAP D3
const mapSvg = d3.select('#map');
const mapWidth = +mapSvg.attr('width');
const mapHeight = +mapSvg.attr('height');

const projection = d3.geoAlbers()
    // coordinates
    .center([4.9, 52.366667])
    .parallels([51.5, 51.49])
    .rotate(120)
    .scale(250000)
    .translate([mapWidth / 2, mapHeight / 2]);

const path = d3.geoPath()
    .projection(projection);

const district = { A: 'Centrum', B: 'Westpoort', E: 'West', M: 'Oost', K: 'Zuid', F: 'Nieuw west', N: 'Noord', T: 'Zuidoost' };

const colorDistricts = d3.scaleLinear()
    .domain([0, 30000])
    .range(['#fff', '#ff5722']);

const mapTooltip = d3.select("body")
    .append("div")
    .attr("class", "mapTooltip")
    .style("position", "absolute")
    .style("visibility", "hidden")
    .style("z-index", "1")

//#endregion

// update map
function updateMap (jsonMapData) {
    /* Districts */
    const districts = topojson.feature(jsonMapData, jsonMapData.objects.buurten).features;

    // Draw neighborhoods
    let paths = mapSvg.selectAll('.neighborhood')
        .data(districts)

    paths
        .enter()
        .append('g')
        .append('path')
        .merge(paths)
        .attr('class', 'neighborhood')
        .attr('d', path)
        .attr('fill', function (d) {
            const total = calculateTotal(d.properties.waste, userSelectDay);
            return colorDistricts(total);
        })
        .style('stroke', d => {
            const districtCode = d.properties.Buurtcombinatie_code;
            const isSelected = userSelectDistrictsList.find( item => item.id === districtCode)

            if (isSelected) {
                return isSelected.color;
            }
        })
        .attr('stroke-width', 6)
        .on("mouseover", d => {
            const total = calculateTotal(d.properties.waste, userSelectDay);

            return mapTooltip.style("visibility", "visible")
                .html(`
                    <span class='mapTooltip__dist'>${district[d.properties.Stadsdeel_code]}, ${d.properties.Buurtcombinatie}</span>
                    <span class='mapTooltip__value'>${total} afvalzakken</span>
                `)
        })
        .on("mousemove", () => {
            // tt positioning: https://www.d3-graph-gallery.com/graph/interactivity_tooltip.html
            return mapTooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px")
        })
        .on("mouseout", () => {
            return mapTooltip.style("visibility", "hidden")
        });
};

// draw map borders
function drawDistrictBorders(jsonMapData) {
    // Draw borders neighborhoods
    mapSvg.append('path')
        .attr('class', 'neighborhood-borders')
        .attr('d', path(topojson.mesh(jsonMapData, jsonMapData.objects.buurten, function (a, b) { return a !== b; })));
}

//#region BAR CHART
let margin = {top: 30, right: 30, bottom: 70, left: 60},
    width = 700 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

// append the svg object to the body of the page
let svg = d3.select('#compareWasteChart')
    .append('svg')
        .attr('width', width + margin.left + margin.right)
        .attr('height', height + margin.top + margin.bottom)
    .append('g')
        .attr('transform',
            'translate(' + margin.left + ',' + margin.top + ')');

// Initialize the X axis
let x = d3.scaleBand()
    .range([ 0, width ])
    .padding([0.2])

let xSubgroup = d3.scaleBand()
    .range([0, x.bandwidth()])
    .padding([0.15])

let xAxis = svg.append('g')
    .attr('transform', 'translate(0,' + height + ')')

// Initialize the Y axis
let y = d3.scaleLinear()
    .range([ height, 0]);
let yAxis = svg.append('g')
    .attr('class', 'myYaxis')

const barTooltip = d3.select("body")
    .append("div")
    .attr("class", "barTooltip")
    .style("position", "absolute")
    .style("visibility", "hidden")
    .style("z-index", "1")
//#endregion

// update bar chart
function updateBarChart(data) {
    // List of groups = species here = value of the first column called group -> I show them on the X axis
    let groups = data.map( function(d){ return(d.day)});

    // List of subgroups = header of the csv files = soil condition here
    let subgroups = data[0].districts.map( function(d) {return d.district});

    // Update the X axis
    x.domain(groups)
        .range([ 0, width ]);
    xSubgroup.domain(subgroups)
        .range([0, x.bandwidth()]);

    xAxis.call(d3.axisBottom(x).tickSize(0))

    // Update the Y axis
    y.domain([0, d3.max(data, function(d) { return d3.max(d.districts, function(d) { return d.value; }); })]);
    yAxis.call(d3.axisLeft(y))
    .append('text')
        .attr('transform', 'rotate(-90)')
        .attr('y', 6)
        .attr('dy', '.71em')
        .style('text-anchor', 'end')
        .text('Hoeveelheid afvalzakken')
        .attr('fill', 'black')

    let group = svg.selectAll('.group')
        .data(data)

    group
        .enter()
        .append('g')
        .merge(group)
        .attr('transform', function(d) {return 'translate(' + x(d.day) + ',0)'})
        .attr('class', 'group')

    let rect = svg.selectAll('.group').selectAll('rect')
        .data(function(d) {
            return subgroups.map(function(key) {
                const currentDistrict = d.districts.find(obj => obj.district == key);
                return {key: currentDistrict.district, value: currentDistrict.value, day: d.day, color: currentDistrict.color};
            });
        })

    rect
        .enter()
        .append('rect')
        .merge(rect)
        .attr('x', function(d) { return xSubgroup(d.key) })
        .attr('fill', function(d) { return `#${d.color}` })
        .attr('width', xSubgroup.bandwidth())
        .attr('height', function(d) { return height - y(0); }) // always equal to 0
        .attr('y', function(d) { return y(0); })
        .attr('class', 'rect')
        .on("mouseover", d => {
            return barTooltip.style("visibility", "visible")
                .html(`
                    <span class='barTooltip__dist'>${d.key}</span>
                    <span class='barTooltip__value'>${d.value} afvalzakken </span>
                `)
        })
        .on("mousemove", () => {
            // tt positioning: https://www.d3-graph-gallery.com/graph/interactivity_tooltip.html
            return barTooltip.style("top", (event.pageY-10)+"px").style("left",(event.pageX+10)+"px")
        })
        .on("mouseout", () => {
            return barTooltip.style("visibility", "hidden")
        });

    svg.selectAll('rect')
        .transition()
        .duration(800)
        .attr('y', function(d) { return y(d.value) })
        .attr('height', function(d) { return height - y(d.value) })
        .delay(function(d,i){ return(i*50) })

    rect.exit().remove();
}

// update chart data
function updateData(data, userSelections, compareWaste) {
    // find districts in dataset
    const selectedDistricts = userSelections.map(selection => {
        const selectedDistrict = data.find(district => {
            return district.properties.Buurtcombinatie_code === selection.id;
        });

        selectedDistrict.properties.color = selection.color;

        return selectedDistrict;
    });

    const districtAverage = compareDistricts(selectedDistricts, compareWaste);

    updateBarChart(districtAverage);
    updateMap(rawData);
}

// calculate total waste of week or day
function calculateTotal(districtWaste, userSelectedDay) {
    let amountPerDay = districtWaste;

    // get total from day
    if (userSelectedDay) {
        const totalPerDay = Object.entries(districtWaste).filter( day => day[0] === userSelectedDay ).flat();

        amountPerDay = {
            [totalPerDay[0]] : totalPerDay[1]
        }
    }

    return Object.values(amountPerDay).reduce((acc, value) => acc + value, 0)
}

// save day selection
function addSubMenuEventListers() {
    const menuItems = document.querySelectorAll('.global-nav__sub__menu input');

    // unchecks an item on click if already checked
    menuItems.forEach(item => {
        item.addEventListener('click', e => {
            //  check is user unchecks btn
            if (item.hasAttribute('class')) {
                item.removeAttribute('class');
                item.checked = false;
                userSelectDay = '';
            } else {
                menuItems.forEach(item => {
                    item.removeAttribute('class')
                })

                item.setAttribute('class', 'radio-checked')
                userSelectDay = item.value;
            }

            updateMap(rawData);
        });
    });
}

// populate filter dropdown
function populateDistrictsDropdown(data, compareWaste) {
    const dropdown = document.getElementById('districtsDropdown');

    const districts = [ {A: 'Centrum'}, {B: 'Westpoort'}, {E: 'West'}, {M: 'Oost'}, {K: 'Zuid'}, {F: 'Nieuw west'}, {N: 'Noord'}, {T: 'Zuidoost'} ];

    const sortedDistricts = districts.sort(function(a, b) {
        a = Object.values(a);
        b = Object.values(b);

        if (a < b) return -1
        if (a > b) return 1
    });

    sortedDistricts.forEach(district => {
        // create list elements for districts
        const districtListElement = document.createElement('li');

        // create checkbox element
        const districtCheckboxElement = document.createElement('input');
            districtCheckboxElement.setAttribute('type', 'checkbox');
            districtCheckboxElement.setAttribute('id', `${Object.values(district)}`);

        // create label for checkbox
        const districtLabelElement = document.createElement('label');
            districtLabelElement.textContent = Object.values(district);
            districtLabelElement.setAttribute('for', `${Object.values(district)}`);

        // append elements
        districtListElement.appendChild(districtCheckboxElement);
        districtListElement.appendChild(districtLabelElement);

        // filter all neighhborhoods
        const neighborhoods = data.filter(item => item.properties.Stadsdeel_code == Object.keys(district)[0])

        if (neighborhoods) {
            // create a new list for children
            const neighborhoodListContainer = document.createElement('ol');

            neighborhoods.forEach(neighborhood => {
                const neighborhoodListElement = document.createElement('li');

                // create checkbox element
                const neighborhoodCheckboxElement = document.createElement('input');
                    neighborhoodCheckboxElement.setAttribute('type', 'checkbox');
                    neighborhoodCheckboxElement.setAttribute('id', `${neighborhood.properties.Buurtcombinatie}`);
                    neighborhoodCheckboxElement.setAttribute('class', 'neighborhood-input');
                    neighborhoodCheckboxElement.setAttribute('data-name', `${neighborhood.properties.Buurtcombinatie}`);
                    neighborhoodCheckboxElement.setAttribute('data-id', `${neighborhood.properties.Buurtcombinatie_code}`);

                // create label for checkbox
                const neighborhoodLabelElement = document.createElement('label');
                    neighborhoodLabelElement.textContent = neighborhood.properties.Buurtcombinatie;
                    neighborhoodLabelElement.setAttribute('for', `${neighborhood.properties.Buurtcombinatie}`);

                // append elements
                neighborhoodListElement.appendChild(neighborhoodCheckboxElement);
                neighborhoodListElement.appendChild(neighborhoodLabelElement);
                neighborhoodListContainer.appendChild(neighborhoodListElement);
            });

            // append container
            districtListElement.appendChild(neighborhoodListContainer)
        }

        dropdown.appendChild(districtListElement)
    });

    addDropdownEventListeners(data, compareWaste);
}

// add dropdown event listeners
function addDropdownEventListeners(data, compareWaste) {
    const inputs = document.querySelectorAll('.neighborhood-input');

    inputs.forEach( input => {
        createDropdownEventListeners(data, input, compareWaste);
    });
}

// create event listeners for items
function createDropdownEventListeners(data, input, compareWaste) {
    const selectionsContainer = document.getElementById('districtsDropdownSelections');
    const inputName = input.getAttribute('data-name');
    const inputId = input.getAttribute('data-id');

    input.addEventListener('change', event => {
        if (input.checked) {
            // assign id and color, always picks the first available color
            const newSelection = {
                id: inputId,
                color: availableColorList[0]
            }

            // push selection
            userSelectDistrictsList.push(newSelection);

            // make color unavailable
            availableColorList.shift();

            input.nextElementSibling.classList.add(`user-select-${newSelection.color}`)

            // create elements
            const selectionLabel = document.createElement('label');
            selectionLabel.textContent = inputName;
            selectionLabel.setAttribute('id', `select-${inputId}`);
            selectionLabel.classList.add(`user-select-${newSelection.color}`)
            selectionsContainer.append(selectionLabel);
        } else {
            // find item in list
            let selectionInList = userSelectDistrictsList.find( neighborhood => neighborhood.id === inputId );

            // remove item from list
            // make color available
            if (selectionInList) {
                const index = userSelectDistrictsList.indexOf(selectionInList);
                availableColorList.push(selectionInList.color);

                if (index > -1) userSelectDistrictsList.splice(index, 1);

                const removeElement = document.getElementById(`select-${inputId}`);
                selectionsContainer.removeChild(removeElement);

                input.nextElementSibling.classList.remove(`user-select-${selectionInList.color}`)
            }
        }

        // clean legend
        const legendLabels = document.querySelectorAll('#districtsDropdownSelections label:not(.user-select-default)');

        legendLabels.forEach(label => {
            label.addEventListener('click', function(e) {
                let selectionInList = userSelectDistrictsList.find( neighborhood => `select-${neighborhood.id}` === label.getAttribute('id') );

                // remove item from list
                // make color available
                if (selectionInList) {
                    const index = userSelectDistrictsList.indexOf(selectionInList);
                    availableColorList.push(selectionInList.color);

                    if (index > -1) userSelectDistrictsList.splice(index, 1);

                    const removeElement = document.getElementById(`select-${inputId}`);
                    selectionsContainer.removeChild(removeElement);

                    input.nextElementSibling.classList.remove(`user-select-${selectionInList.color}`)
                    input.checked = false;

                     updateData(data, userSelectDistrictsList, compareWaste);
                }
            });
        });

        // update data for selections
        updateData(data, userSelectDistrictsList, compareWaste);
    });
}

// calculate waste average
function calculateWasteAverage(data, divisor) {
    const days = ['ma', 'di', 'woe', 'do', 'vr', 'zat', 'zo'];

    // create template objects
    const valuesPerDay = days.map( dayName => {
        let dayTotal = {
            day: dayName,
            districts: [
                {
                    district: 'Amsterdam',
                    value: 0,
                    color: '273e66',
                }
            ]
        }

        return dayTotal;
    });

    valuesPerDay.forEach (item => {
         const currentDay = item.day;

         data.forEach(district => {
            item.districts[0].value += district.properties.waste[currentDay];
            // => total waste for this day
         });

        item.districts[0].value = Math.floor(item.districts[0].value / divisor);
        // => average waste for this day
    })

    return valuesPerDay;
}

// Add or remove user selections
function compareDistricts(compareData, currentSelectList) {

    currentSelectList.forEach(currentDay => {

        // if empty pop last
        if (!compareData.length) {
            currentDay.districts.pop()
        } else {
            compareData.forEach(newDistrict => {
                const isInList = Object.keys(currentDay.districts).some( key => {
                    return currentDay.districts[key].district === newDistrict.properties.Buurtcombinatie;
                });

                // only push if not in list
                if (!isInList) {
                    const selectedDistrict = {
                        district: newDistrict.properties.Buurtcombinatie,
                        value: newDistrict.properties.waste[currentDay.day],
                        color: newDistrict.properties.color
                    }

                    currentDay.districts.push(selectedDistrict);
                } else {
                    currentDay.districts.forEach(currentList => {
                        const inSelectionList = Object.keys(compareData).some( key => {
                            return compareData[key].properties.Buurtcombinatie === currentList.district || currentList.district === 'Amsterdam';
                        });

                        if (!inSelectionList) {
                            const index = currentDay.districts.indexOf(currentList);
                            if (index > -1) {
                                currentDay.districts.splice(index, 1);
                            }
                        }
                    });
                }
            });
        }
    });

    return currentSelectList
}

</script>

<script>
// script for global nav behaviour
// change header on scroll
window.addEventListener('scroll', function(e) {
    resizeMainNav();
    toggleSubNav();
});

function resizeMainNav() {
    const globalNav = document.querySelector('.global-nav__main');

    if (document.documentElement.scrollTop > 50) {
        globalNav.classList.add('global-nav--shrink')
    } else {
        globalNav.classList.remove('global-nav--shrink')
    }
}

function toggleSubNav() {
    const subNav = document.querySelector('.global-nav__sub');

    const map = document.querySelector('.map')
    const rectA = map.getBoundingClientRect();

    const participate = document.querySelector('.participate')
    const rectB = participate.getBoundingClientRect();


    if (rectA.top <= 200 && rectB.top >= 150) {
        subNav.classList.add('show');
    } else {
        subNav.classList.remove('show');
    }
}
</script>