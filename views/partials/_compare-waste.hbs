<section class="compare-waste">
    <div class="compare-waste__inner">
        <h2>Wanneer wordt het afval opgehaald?</h2>
        <p class="compare-waste__inner__text">
            In deze datavisualisatie wordt de hoeveelheid afval weer gegeven.
            De data is momenteel nog niet compleet voor heel Amsterdam. Als meer vuilnishandelaren meedoen,
            krijgen wij een duidelijker beeld van het bedrijfsafval in Amsterdam.
        </p>

        <div id="compareWasteChart" class="compare-waste__inner__chart"></div>
    </div>
</section>

{{!-- <script>

d3.json('./static/data/output/wasteByDistrict.json', (rawData) => {
    const data = rawData.objects.buurten.geometries;
    const districtAveragePerDay = calculateAverage(data);

    populateDistrictsDropdown(data)
    update(districtAveragePerDay)
})

function populateDistrictsDropdown(data) {
    const dropdown = document.getElementById('districtsDropdown');

    const districts = [ {A: 'Centrum'}, {B: 'Westpoort'}, {E: 'West'}, {M: 'Oost'}, {K: 'Zuid'}, {F: 'Nieuw west'}, {N: 'Noord'}, {T: 'Zuidoost'} ];

    const sortedDistricts = districts.sort(function(a, b) {
        a = Object.values(a);
        b = Object.values(b);

        if (a < b) return -1
        if (a > b) return 1
    });

    sortedDistricts.forEach(district => {
        // create list elements for districts
        const districtListElement = document.createElement('li');

        // create checkbox element
        const districtCheckboxElement = document.createElement('input');
            districtCheckboxElement.setAttribute('type', 'checkbox');
            districtCheckboxElement.setAttribute('id', `${Object.values(district)}`);

        // create label for checkbox
        const districtLabelElement = document.createElement('label');
            districtLabelElement.textContent = Object.values(district);
            districtLabelElement.setAttribute('for', `${Object.values(district)}`);

        // append elements
        districtListElement.appendChild(districtCheckboxElement);
        districtListElement.appendChild(districtLabelElement);

        // filter all neighhborhoods
        const neighborhoods = data.filter(item => item.properties.Stadsdeel_code == Object.keys(district)[0])

        if (neighborhoods) {
            // create a new list for children
            const neighborhoodListContainer = document.createElement('ol');

            neighborhoods.forEach(neighborhood => {
                const neighborhoodListElement = document.createElement('li');

                // create checkbox element
                const neighborhoodCheckboxElement = document.createElement('input');
                    neighborhoodCheckboxElement.setAttribute('type', 'checkbox');
                    neighborhoodCheckboxElement.setAttribute('id', `${neighborhood.properties.Buurtcombinatie}`);
                    neighborhoodCheckboxElement.setAttribute('class', 'neighborhood-input');
                    neighborhoodCheckboxElement.setAttribute('data-name', `${neighborhood.properties.Buurtcombinatie}`);
                    neighborhoodCheckboxElement.setAttribute('data-id', `${neighborhood.properties.Buurtcombinatie_code}`);

                // create label for checkbox
                const neighborhoodLabelElement = document.createElement('label');
                    neighborhoodLabelElement.textContent = neighborhood.properties.Buurtcombinatie;
                    neighborhoodLabelElement.setAttribute('for', `${neighborhood.properties.Buurtcombinatie}`);

                // append elements
                neighborhoodListElement.appendChild(neighborhoodCheckboxElement);
                neighborhoodListElement.appendChild(neighborhoodLabelElement);
                neighborhoodListContainer.appendChild(neighborhoodListElement);
            });

            // append container
            districtListElement.appendChild(neighborhoodListContainer)
        }

        dropdown.appendChild(districtListElement)
    });

    addEventListeners();
}

function addEventListeners() {
    const inputs = document.querySelectorAll(".neighborhood-input");

    inputs.forEach( input => {
        input.addEventListener('change', event => {
            const selectionsContainer = document.getElementById("districtsDropdownSelections");
            const inputName = input.getAttribute('data-name');
            const inputId = input.getAttribute('data-id');

            if (input.checked) {
                const selectionLabel = document.createElement('label');
                selectionLabel.textContent = inputName;
                selectionLabel.setAttribute('id', `select-${inputId}`)
                selectionsContainer.append(selectionLabel);
            } else {
                const removeElement = document.getElementById(`select-${inputId}`);
                selectionsContainer.removeChild(removeElement);
            }
        })
    })
}

function calculateAverage(data) {
    const averagePerDay = [
        {
            day: "ma",
            district: "Amsterdam",
            value: 0
        },
        {
            day: "di",
            district: "Amsterdam",
            value: 0
        },
        {
            day: "woe",
            district: "Amsterdam",
            value: 0
        },
        {
            day: "do",
            district: "Amsterdam",
            value: 0
        },
        {
            day: "vr",
            district: "Amsterdam",
            value: 0
        },
        {
            day: "zat",
            district: "Amsterdam",
            value: 0
        },
        {
            day: "zo",
            district: "Amsterdam",
            value: 0
        },
    ]

    data.forEach( district => {
        averagePerDay.forEach( (item) => {
            const currentDay = item.day;
            averagePerDay.find(item => item.day === currentDay).value += district.properties.waste[currentDay];
        })
    })

    averagePerDay.forEach( item => {
            const totalAmount = item.value;
            const average = Math.floor(totalAmount / data.length);

            item.value = average;
    });

    return averagePerDay;
}


// set the dimensions and margins of the graph
var margin = {top: 30, right: 30, bottom: 70, left: 60},
    width = 460 - margin.left - margin.right,
    height = 400 - margin.top - margin.bottom;

// append the svg object to the body of the page
var svg = d3.select("#compareWasteChart")
  .append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform",
          "translate(" + margin.left + "," + margin.top + ")");

// Initialize the X axis
var x = d3.scaleBand()
  .range([ 0, width ])
  .padding(0.2);
var xAxis = svg.append("g")
  .attr("transform", "translate(0," + height + ")")

// Initialize the Y axis
var y = d3.scaleLinear()
  .range([ height, 0]);
var yAxis = svg.append("g")
  .attr("class", "myYaxis")


// A function that create / update the plot for a given variable:
function update(data) {

    //console.log(data)

    // Update the X axis
    x.domain(data.map(function(d) { return d.day }))
    xAxis.call(d3.axisBottom(x))

    // Update the Y axis
    y.domain([0, d3.max(data, function(d) { return d.value }) ]);
    yAxis.transition().duration(1000).call(d3.axisLeft(y));

    // Create the u variable
    var u = svg.selectAll("rect")
        .data(data)

    u
        .enter()
        .append("rect") // Add a new rect for each new elements
        .merge(u) // get the already existing elements as well
        .transition() // and apply changes to all of them
        .duration(1000)
        .attr("x", function(d) { return x(d.day); })
        .attr("y", function(d) { return y(d.value); })
        .attr("width", x.bandwidth())
        .attr("height", function(d) { return height - y(d.value); })
        .attr("fill", "#69b3a2")

    // If less group in the new dataset, I delete the ones not in use anymore
    u
        .exit()
        .remove()
}
</script> --}}